function AccessGranted {
  Display "Access Granted" on LCD, Light Up Green LED and Unlock Door;
  while (Door Open and 5 seconds have not passed since last person walked through) {
    Scan Weight and Height People Walking Through and Send Data to Edge Device;
  }
  Lock Door;
  
}

function AccessDenied {
  Invalid Tries++;
  Display "Access Denied!" on LCD, Light Up Red LED and lay Access Denied Sound;
}


Start;
while loop {
  Off LED;
  if Invalid Tries >= 3 and Alarm Mode Off {
    Activated Alarm Mode;
  }
  if Serial Input Detected {
    if (Serial Input = "Alarm On") {
      Activate Alarm Mode;
    } else if (Serial Input = "Alarm Off") {
      Deactivate Alarm Mode and set Invalid Tries = 0;
    } else if (Serial Input = "Remote Unlock") {
      Unlock Door;
    } else if (Serial Input has "WeightThresholdUpdate") {
      Update Weight Threshold;
    } else if (Serial Input has "DoorHeightUpdate") {
      Update Door Height;
    }
  }
  if Waiting For Card {
    Display "Waiting For Card" on LCD and Lock Door (if Door Open);
  }
  if Card Scanned {
    if Card is Exit {
      Call AccessGranted;
    } else {
      Send Card ID to Edge Device to check if Valid;
      if Card ID is Valid {
        Light Up Yellow LED and Display "Waiting for approval" on LCD;
        if (Weight match the registered user) {
          Call AccessGranted;
        } else {
          while (Edge Device has not responded) {
            if (Serial Input = "Approved") {
              Call AccessGranted;
              break;
            } else {
              Call AccessDenied;
              break;
            }
            if (30 seconds passed since start of waiting) {
              Call AccessDenied;
              break;
            }
          }
        }
      } else {
        Call AccessDenied;
      }
    }
  }
}
End; 


Start;
while loop {
  branch(Background_Serial_Read) [Background] {
    switch(Serial Input) {
      case Entry or Exit:
        Insert Entry or Exit information into Database;
        break;
      case Alarm:
        Update Alarm Status in Database;
        break;
      case Unlock:
        Create and insert unlock attempt into Database;
        break;
      case Update:
        Update unlock attempt status in Database;
        break;
      case People:
        Increment People in Room count in Database;
        break;
    }
  }
  branch(Flask_Web_Server) [Active] {
    switch(Web Path) {
      case "/" ["GET"]:
        Display Home Page;
        break;
      case "/login" ["GET"]:
        Display Login Page;
        break;
      case "/logout" ["GET"]:
        Log user out and redirect to "/login";
        break;
      case "profile"  ["GET"]:
        Display Profile Page;
        break;
      case "/access_logs" ["GET"] (Admin Only):
        Display Access Logs Page;
        break;
      case "/config" ["GET"] (Admin Only):
        Display Config Page;
        break;
    }
  }
  branch(Flask_API_Server) {
    switch(Web Path) {
      case "/login"  ["POST"]:
        Authenticates User Details;
        if (valid) {
          Redirect to "/";
        } else {
          Redirect to "/login";
        }
        break;
      case "/health_statistics" ["GET"]:
        Returns User Height, Weight and BMI;
        break;
      case "/profile" ["POST"]:
        Updates the profile information;
        break;
      case "/config" ["POST"]:
        Updates the system configs;
        break;
      case "/approve/<id>" ["GET"]:
        Approves the unlock request for the specified id;
        break;
      case "/reject/<id>" ["GET"]:
        Rejects the unlock request for the specified id;
        break;
      case "/alarm" ["GET"]:
        Toggle the alarm;
        break;
      case "/unlock" ["GET"] (Admin Only):
        Remotely unlock the lock;
        break;
    }
  }
}
End; 


function CheckSerialInput {
  switch(Serial Input) {
    case Entry or Exit:
      Insert Entry or Exit information into Database;
      break;
    case Alarm:
      Update Alarm Status in Database;
      break;
    case Unlock:
      Create and insert unlock attempt into Database;
      break;
    case Update:
      Update unlock attempt status in Database;
      break;
    case People:
      Increment People in Room count in Database;
      break;
  }
}


function Flask Api Server {
  switch(Web Path) {
      case "/login"  ["POST"]:
        Authenticates User Details;
        if (valid) {
          Redirect to "/";
        } else {
          Redirect to "/login";
        }
        break;
      case "/health_statistics" ["GET"]:
        Returns User Height, Weight and BMI;
        break;
      case "/profile" ["POST"]:
        Updates the profile information;
        break;
      case "/config" ["POST"]:
        Updates the system configs;
        break;
      case "/approve/<id>" ["GET"]:
        Approves the unlock request for the specified id;
        break;
      case "/reject/<id>" ["GET"]:
        Rejects the unlock request for the specified id;
        break;
      case "/alarm" ["GET"]:
        Toggle the alarm;
        break;
      case "/unlock" ["GET"] (Admin Only):
        Remotely unlock the lock;
        break;
    }
}


function Flask Web Server {
  switch(Web Path) {
      case "/" ["GET"]:
        Display Home Page;
        break;
      case "/login" ["GET"]:
        Display Login Page;
        break;
      case "/logout" ["GET"]:
        Log user out and redirect to "/login";
        break;
      case "profile"  ["GET"]:
        Display Profile Page;
        break;
      case "/access_logs" ["GET"] (Admin Only):
        Display Access Logs Page;
        break;
      case "/config" ["GET"] (Admin Only):
        Display Config Page;
        break;
    }
}